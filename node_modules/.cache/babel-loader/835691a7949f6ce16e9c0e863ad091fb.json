{"ast":null,"code":"import _toConsumableArray from \"/Volumes/Education/programming Files/PvvSirReact/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Volumes/Education/programming Files/PvvSirReact/src/graph.js\";\nimport React from 'react';\nimport { Chart } from \"react-google-charts\";\nexport function MyChart(props) {\n  console.log(props.ar);\n  var data = props.ar;\n  var options = {\n    title: 'Compaction Test Result of Ferro Manganese Slag',\n    hAxis: {\n      title: props.ar[0][0] + \" (%)\"\n    },\n    vAxis: {\n      title: \"Density (g/cm3)\"\n    },\n    series: {\n      0: {\n        curveType: \"function\"\n      },\n      1: {\n        curveType: \"function\"\n      },\n      2: {\n        curveType: \"function\"\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Chart, {\n    chartType: \"LineChart\",\n    width: \"100%\",\n    height: \"600px\",\n    data: data,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }));\n}\nfunction generateChartData(sieveData) {\n  var chartData = [[\"Sieve Size (mm)\", \"Percent Retained\"]].concat(_toConsumableArray(sieveData.map(function (item) {\n    return [item.size, Math.log10(100 / item.percentPassing)];\n  })));\n  return chartData;\n}\nexport function MyChart2() {\n  var mySieveData = [{\n    size: 4.75,\n    percentPassing: 100\n  }, {\n    size: 2.36,\n    percentPassing: 98.5\n  }, {\n    size: 1.18,\n    percentPassing: 88.3\n  }, {\n    size: 0.6,\n    percentPassing: 65.2\n  }, {\n    size: 0.3,\n    percentPassing: 38.1\n  }, {\n    size: 0.15,\n    percentPassing: 18.4\n  }, {\n    size: 0.075,\n    percentPassing: 5.8\n  }, {\n    size: 0.038,\n    percentPassing: 1.4\n  }, {\n    size: 0.019,\n    percentPassing: 0.2\n  }];\n  var chartData = generateChartData(mySieveData); // Replace \"mySieveData\" with your actual sieve data\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Chart, {\n    chartType: \"LineChart\",\n    width: \"100%\",\n    height: \"400px\",\n    data: chartData,\n    options: {\n      hAxis: {\n        title: \"Sieve Size (mm)\",\n        logScale: false\n      },\n      vAxis: {\n        title: \"Percent Retained\",\n        logScale: true,\n        minValue: 0\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }));\n}\nexport function MyChart1(props) {\n  var a = props.a || []; // add a check to assign an empty array if 'a' is undefined or null\n  var ar = [[\"Water Content (%)\", \"Angle of Internal Friction\"]];\n  for (var i = 0; i < a.length; i++) {\n    // use '<' instead of '<=' to avoid accessing undefined index\n    ar.push([a[i], props.b[i]]);\n  }\n  var data = ar;\n  var options = {\n    title: 'Direct Shear Test Result of Ferro Manganese Slag',\n    hAxis: {\n      title: ar[0][0]\n    },\n    vAxis: {\n      title: ar[0][1]\n    },\n    series: {\n      0: {\n        curveType: \"function\"\n      },\n      1: {\n        curveType: \"function\"\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Chart, {\n    chartType: \"LineChart\",\n    width: \"100%\",\n    height: \"600px\",\n    data: data,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }));\n}\nexport default (MyChart, MyChart1, MyChart2);","map":{"version":3,"names":["React","Chart","MyChart","props","console","log","ar","data","options","title","hAxis","vAxis","series","curveType","createElement","Fragment","chartType","width","height","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","generateChartData","sieveData","chartData","concat","_toConsumableArray","map","item","size","Math","log10","percentPassing","MyChart2","mySieveData","logScale","minValue","MyChart1","a","i","length","push","b"],"sources":["/Volumes/Education/programming Files/PvvSirReact/src/graph.js"],"sourcesContent":["import React from 'react';\nimport { Chart } from \"react-google-charts\";\n\n\n\nexport function MyChart(props) {\n    console.log(props.ar)\n\n    const data = props.ar;\n   const options = {\n    title: 'Compaction Test Result of Ferro Manganese Slag',\n      hAxis: {\n        title: (props.ar[0][0]+\" (%)\"),\n      },\n      vAxis: {\n        title: \"Density (g/cm3)\",\n      },\n      series: {\n        \n        0: { curveType: \"function\" },\n        1: { curveType: \"function\" },\n        2: { curveType: \"function\" },\n      },\n    };\n  \n  \n  \n    return (\n      <>\n      \n      <Chart\n        chartType=\"LineChart\"\n        width=\"100%\"\n        height=\"600px\"\n        data={data}\n        options={options}\n      />\n     \n    \n  \n  \n      \n      \n      \n      </>)\n}\n\nfunction generateChartData(sieveData) {\n  const chartData = [\n    [\"Sieve Size (mm)\", \"Percent Retained\"],\n    ...sieveData.map((item) => [\n      item.size,\n      Math.log10(100 / item.percentPassing),\n    ]),\n  ];\n\n  return chartData;\n}\nexport function MyChart2() {\n\n  const mySieveData = [\n    { size: 4.75, percentPassing: 100 },\n    { size: 2.36, percentPassing: 98.5 },\n    { size: 1.18, percentPassing: 88.3 },\n    { size: 0.6, percentPassing: 65.2 },\n    { size: 0.3, percentPassing: 38.1 },\n    { size: 0.15, percentPassing: 18.4 },\n    { size: 0.075, percentPassing: 5.8 },\n    { size: 0.038, percentPassing: 1.4 },\n    { size: 0.019, percentPassing: 0.2 },\n  ];\n  const chartData = generateChartData(mySieveData); // Replace \"mySieveData\" with your actual sieve data\n\n  return (\n    <>\n    \n    <Chart\n      chartType=\"LineChart\"\n      width=\"100%\"\n      height=\"400px\"\n      data={chartData}\n      options={{\n        hAxis: {\n          title: \"Sieve Size (mm)\",\n          logScale: false,\n        },\n        vAxis: {\n          title: \"Percent Retained\",\n          logScale: true,\n          minValue: 0,\n        },\n      }}\n    />\n  \n\n\n    \n    \n    \n    </>)\n}\n\nexport function MyChart1(props) {\n  var a = props.a || []; // add a check to assign an empty array if 'a' is undefined or null\n  var ar = [[\"Water Content (%)\",\"Angle of Internal Friction\"]];\n  for(let i = 0; i < a.length; i++){ // use '<' instead of '<=' to avoid accessing undefined index\n    ar.push([a[i], props.b[i]]);\n  }\n  const data = ar;\n const options = {\n  title: 'Direct Shear Test Result of Ferro Manganese Slag',\n    hAxis: {\n      title: (ar[0][0]),\n    },\n    vAxis: {\n      title: ar[0][1],\n    },\n    series: {\n      \n      0: { curveType: \"function\" },\n      1: { curveType: \"function\" },\n      \n    },\n  };\n\n\n\n  return (\n    <>\n    \n    <Chart\n      chartType=\"LineChart\"\n      width=\"100%\"\n      height=\"600px\"\n      data={data}\n      options={options}\n    />\n   \n  \n\n\n    \n    \n    \n    </>)\n}\n\n\n\n\n\n\nexport default (MyChart,MyChart1,MyChart2);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}