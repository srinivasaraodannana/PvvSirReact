{"ast":null,"code":"var _jsxFileName = \"/Volumes/Education/programming Files/PvvSirReact/src/graph.js\";\nimport React from 'react';\nimport { Chart } from \"react-google-charts\";\nexport function MyChart(props) {\n  console.log(props.ar);\n  var data = props.ar;\n  var options = {\n    title: 'Compaction Test Result of Ferro Manganese Slag',\n    hAxis: {\n      title: props.ar[0][0] + \" (%)\"\n    },\n    vAxis: {\n      title: \"Density (g/cm3)\"\n    },\n    series: {\n      0: {\n        curveType: \"function\"\n      },\n      1: {\n        curveType: \"function\"\n      },\n      2: {\n        curveType: \"function\"\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Chart, {\n    chartType: \"LineChart\",\n    width: \"100%\",\n    height: \"600px\",\n    data: data,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }));\n}\nexport function MyChart2() {\n  var chartData = [[\"Sieve Size (mm)\", \"Percent Retained\"]];\n  var a = [10, 4.75, 2.36, 1.18, 0.6, 0.3, 0.15, 0.075];\n  var b = [100, 95.93, 83.85, 69.53, 56.59, 40.01, 18.51, 0.0];\n  for (var i = 0; i < a.length; i++) {\n    // use '<' instead of '<=' to avoid accessing undefined index\n    chartData.push([a[i], b[i]]);\n  }\n  var sieveData = {\n    labels: [].concat(a),\n    datasets: [{\n      label: \"Cumulative Percent Passing\",\n      data: [].concat(b),\n      type: \"line\",\n      pointRadius: 0,\n      fill: false,\n      lineTension: 0.4,\n      borderWidth: 2,\n      borderColor: \"red\"\n    }]\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Chart, {\n    chartType: \"LineChart\",\n    width: \"100%\",\n    height: \"400px\",\n    data: sieveData,\n    options: {\n      hAxis: {\n        title: \"Sieve Size (mm)\",\n        logScale: true,\n        direction: -1,\n        format: \"#\"\n      },\n      vAxis: {\n        title: \"Cumulative Percent Passing (%)\",\n        logScale: true,\n        format: \"#'%'\",\n        minValue: 0\n      },\n      series: {\n        0: {\n          curveType: \"function\"\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }));\n}\nexport function MyChart1(props) {\n  var a = props.a || []; // add a check to assign an empty array if 'a' is undefined or null\n  var ar = [[\"Water Content (%)\", \"Angle of Internal Friction\"]];\n  for (var i = 0; i < a.length; i++) {\n    // use '<' instead of '<=' to avoid accessing undefined index\n    ar.push([a[i], props.b[i]]);\n  }\n  var data = ar;\n  var options = {\n    title: 'Direct Shear Test Result of Ferro Manganese Slag',\n    hAxis: {\n      title: ar[0][0]\n    },\n    vAxis: {\n      title: ar[0][1]\n    },\n    series: {\n      0: {\n        curveType: \"function\"\n      },\n      1: {\n        curveType: \"function\"\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Chart, {\n    chartType: \"LineChart\",\n    width: \"100%\",\n    height: \"600px\",\n    data: data,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }\n  }));\n}\nexport default (MyChart, MyChart1, MyChart2);","map":{"version":3,"names":["React","Chart","MyChart","props","console","log","ar","data","options","title","hAxis","vAxis","series","curveType","createElement","Fragment","chartType","width","height","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","MyChart2","chartData","a","b","i","length","push","sieveData","labels","concat","datasets","label","type","pointRadius","fill","lineTension","borderWidth","borderColor","logScale","direction","format","minValue","MyChart1"],"sources":["/Volumes/Education/programming Files/PvvSirReact/src/graph.js"],"sourcesContent":["import React from 'react';\nimport { Chart } from \"react-google-charts\";\n\n\n\nexport function MyChart(props) {\n    console.log(props.ar)\n\n    const data = props.ar;\n   const options = {\n    title: 'Compaction Test Result of Ferro Manganese Slag',\n      hAxis: {\n        title: (props.ar[0][0]+\" (%)\"),\n      },\n      vAxis: {\n        title: \"Density (g/cm3)\",\n      },\n      series: {\n        \n        0: { curveType: \"function\" },\n        1: { curveType: \"function\" },\n        2: { curveType: \"function\" },\n      },\n    };\n  \n  \n  \n    return (\n      <>\n      \n      <Chart\n        chartType=\"LineChart\"\n        width=\"100%\"\n        height=\"600px\"\n        data={data}\n        options={options}\n      />\n     \n    \n  \n  \n      \n      \n      \n      </>)\n}\n\n\nexport function MyChart2() {\n\n\n  const chartData = [\n    [\"Sieve Size (mm)\", \"Percent Retained\"],\n    \n    \n  ]\n  var a=[10,4.75,2.36,1.18,0.6,0.3,0.15,0.075];\n\n  var b  = [100,95.93,83.85,69.53,56.59,40.01,18.51,0.0];\n \n  for(let i = 0; i < a.length; i++){ // use '<' instead of '<=' to avoid accessing undefined index\n    chartData.push([a[i], b[i]]);\n  }\n  const sieveData = {\n    labels: [...a],\n    datasets: [{\n      label: \"Cumulative Percent Passing\",\n      data: [...b],\n      type: \"line\",\n      pointRadius: 0,\n      fill: false,\n      lineTension: 0.4,\n      borderWidth: 2,\n      borderColor: \"red\"\n    }]\n  };\n  \n  return (\n    <>\n      <Chart\n        chartType=\"LineChart\"\n        width=\"100%\"\n        height=\"400px\"\n        data={sieveData}\n        options={{\n          hAxis: {\n            title: \"Sieve Size (mm)\",\n            logScale: true,\n            direction: -1,\n            format: \"#\",\n          },\n          vAxis: {\n            title: \"Cumulative Percent Passing (%)\",\n            logScale: true,\n            format: \"#'%'\",\n            minValue: 0,\n          },\n          series: {\n            0: { curveType: \"function\" },\n          },\n        }}  \n      />\n\n  \n  \n\n\n    \n    \n    \n    </>)\n}\n\nexport function MyChart1(props) {\n  var a = props.a || []; // add a check to assign an empty array if 'a' is undefined or null\n  var ar = [[\"Water Content (%)\",\"Angle of Internal Friction\"]];\n  for(let i = 0; i < a.length; i++){ // use '<' instead of '<=' to avoid accessing undefined index\n    ar.push([a[i], props.b[i]]);\n  }\n  const data = ar;\n const options = {\n  title: 'Direct Shear Test Result of Ferro Manganese Slag',\n    hAxis: {\n      title: (ar[0][0]),\n    },\n    vAxis: {\n      title: ar[0][1],\n    },\n    series: {\n      \n      0: { curveType: \"function\" },\n      1: { curveType: \"function\" },\n      \n    },\n  };\n\n\n\n  return (\n    <>\n    \n    <Chart\n      chartType=\"LineChart\"\n      width=\"100%\"\n      height=\"600px\"\n      data={data}\n      options={options}\n    />\n   \n  \n\n\n    \n    \n    \n    </>)\n}\n\n\n\n\n\n\nexport default (MyChart,MyChart1,MyChart2);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}